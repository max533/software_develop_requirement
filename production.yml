version: '3.6'

volumes:
  production_postgres_data: {}
  production_postgres_data_backups: {}
  staticfiles: {}
  log: {}
  nfs:
    driver_opts:
      type: "nfs"
      o: "addr=${NFS_HOST},nolock,soft,rw"
      device: ":${NFS_SHARE_FOLDER}"

networks:
  frontend:
    driver: bridge
  backend:
    driver: bridge

services:
  nginx:
    build:
      context: .
      dockerfile: ./compose/production/nginx/Dockerfile
    image: ${PROJECT_SLUG}_production_nginx
    depends_on:
      - django
    env_file:
      - ./.envs/.production/.nginx
    volumes:
      - type: volume
        source: staticfiles
        target: /usr/share/nginx/html
        volume:
          nocopy: true
      - type: volume
        source: nfs
        target: /usr/share/nginx/html/nfs
        volume:
          nocopy: true
      - type: volume
        source: log
        target: /log
        volume:
          nocopy: false
    networks:
      - frontend
    ports:
      - ${NGINX_SERVICE_PORT}:80
    command: /start

  django: &django
    build:
      context: .
      dockerfile: ./compose/production/django/Dockerfile
    image: ${PROJECT_SLUG}_production_django
    depends_on:
      - postgres
      - redis
    env_file:
      - ./.envs/.production/.django
      - ./.envs/.production/.postgres
      - ./.envs/.production/.oracle
    volumes:
      - type: volume
        source: staticfiles
        target: /shared
        volume:
          nocopy: false
      - type: volume
        source: nfs
        target: /mnt/nfs
        volume:
          nocopy: false
      - type: volume
        source: log
        target: /log
        volume:
          nocopy: false
    networks:
      - frontend
      - backend
    command: /start

  postgres:
    build:
      context: .
      dockerfile: ./compose/production/postgres/Dockerfile
    image: ${PROJECT_SLUG}_production_postgres
    volumes:
      - ${POSTGRES_FOLDER}:/var/lib/postgresql/data
      - ${POSTGRES_BACKUP_FOLDER}:/backups
    networks:
      - backend
    env_file:
      - ./.envs/.production/.postgres

  redis:
    image: redis:5.0
    networks:
      - backend

  celeryworker:
    <<: *django
    image: ${PROJECT_SLUG}_production_celeryworker
    networks:
      - backend
    command: /start-celeryworker

  celerybeat:
    <<: *django
    image: ${PROJECT_SLUG}_production_celerybeat
    networks:
      - backend
    command: /start-celerybeat

  flower:
    <<: *django
    image: ${PROJECT_SLUG}_production_flower
    networks:
      - frontend
      - backend
    command: /start-flower
    ports:
      - ${FLOWER_SERVICE_PORT}:5555